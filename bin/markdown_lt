#!/usr/bin/env python3
import getopt
import sys

import language_tool_python

from markdown_lt import Matcher, AstRenderer


def print_usage():
    print("Usage: markdown_lt [OPTION]... FILE")
    print(" FILE\t\t\t\t\tmarkdown file to check")
    print(" Available options:")
    print("  -l, --language LANG\t\tthe language code of the text")
    print("  -m, --mother-tongue LANG\t\tthe language code of your mother tongue")
    print("  -w, --wordlist DICT\t\ta newline separated file of valid words")
    print("  -o, --enabled-only\t\tdisable all rules except those specified in -e")
    print("  -e, --enable RULES\t\tcomma-separated list of rule IDs to enable")
    print("  -d, --disable RULES\t\tcomma-separated list of rule IDs to disable")
    print(" Returns:")
    print("\t0 if no errors, 1 if errors, 2 if user error")


if __name__ == '__main__':
    if len(sys.argv) <= 1:
        print_usage()
        exit(2)

    language = None
    mother_tongue = None
    wordlist = None
    enabled_only = False
    enable = set()
    disable = set()
    filename = None
    try:
        opts, args = getopt.getopt(sys.argv[1:(len(sys.argv) - 1)], "l:m:w:oe:d:",
                                   ["language=", "mother-tongue=", "wordlist=", "enabled-only", "enable", "disable"])
        for o, a in opts:
            if o in ("-l", "--language"):
                language = a
            elif o in ("-m", "--mother-tongue"):
                mother_tongue = a
            elif o in ("-w", "--wordlist"):
                wordlist = open(a).readlines()
            elif o in ("-o", "--enabled-only"):
                enabled_only = True
            elif o in ("-e", "--enable"):
                enable = {int(rule) for rule in a.split(',')}
            elif o in ("-d", "--disable"):
                disable = {int(rule) for rule in a.split(',')}
            else:
                raise RuntimeError("Unhandled argument found.")
        filename = sys.argv[-1]
    except getopt.GetoptError as err:
        print(err)
        exit(2)

    ast_renderer = AstRenderer()
    language_tool = language_tool_python.LanguageTool(language, mother_tongue, None, wordlist)
    matcher = Matcher(language_tool)

    ast = ast_renderer.read(filename)
    matches = matcher.match(ast)
    print("Found {} matches:\n".format(len(matches)))
    
    for match in matches:
        print("{}\n".format(match))

    exit(int(len(matches) >= 1))
